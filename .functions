[[ -e "$HOME/.ssh/config" ]] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" scp sftp ssh

function p() {
    [[ -z ${__P_PROJECT_PATH+x} ]] && echo '__P_PROJECT_PATH not found.' && return 1
    [[ $# -ne 1 ]] && cat << EOF && return 1
Usage: p [directory-name]

Navigate to your project quickly. 
EOF
    local path paths numberOfProjects searchTerm
    searchTerm="$1"
    paths=$(find "$__P_PROJECT_PATH" -maxdepth ${__P_MAX_DEPTH:-1} -type d -name $searchTerm ! -path "$__P_PROJECT_PATH")

    if [[ ! -z "${paths}" ]]; then
        numberOfProjects=$(wc -l <<< "$paths")
        if [[ $numberOfProjects -eq 1 ]]; then
            path=$(sed '1q;d' <<< "$paths")
            [[ -d "$path" ]] && cd "$path" && pwd && [[ ! -z ${__P_POST_CMD+x} ]] && eval ${__P_POST_CMD}
            return 0
        elif [[ $numberOfProjects -gt 1 ]]; then
            nl <<< "$paths"
            while true; do
                read -p "Select project (1-$numberOfProjects): " index
                if [[ $index =~ ^[0-9]+$ ]]; then
                    path=$(sed "${index}q;d" <<< "$paths")
                    [[ -d "$path" ]] && cd "$path" && pwd && [[ ! -z ${__P_POST_CMD+x} ]] && eval ${__P_POST_CMD}
                    return 0
                fi
            done
        fi
    fi
    echo "Project not found: $searchTerm"
    return 1
}

function __list_directory_in_p_project_path() {
    [[ -z ${__P_PROJECT_PATH+x} ]] && return 1
    local curr potentials 
    curr="${COMP_WORDS[COMP_CWORD]}"
    potentials=$(find "$__P_PROJECT_PATH" -maxdepth ${__P_MAX_DEPTH:-1} -type d ! -path "$__P_PROJECT_PATH" -printf "%f\n")
    COMPREPLY=( $(compgen -W "${potentials}" -- ${curr}) )
}
complete -F __list_directory_in_p_project_path p

function f() {
    [[ $# -ne 1 ]] && cat << EOF && return 1
Usage: f [search-term]

Find file name from current folder.
EOF
    local tmpFolder="/tmp/_f_findings"
    find . -iname "*$1*" | tee $tmpFolder | nl
}

function f#() {
    local tmpFolder="/tmp/_f_findings"
    ([[ $# -ne 1 ]] || [[ ! -r $tmpFolder ]]) && cat << EOF && return 1
Usage: f# [0..n]

Show file path from `f` results. You have to use `f` first.
EOF
    sed "${1}q;d" $tmpFolder
}

function fvim() {
    local tmpFolder="/tmp/_f_findings"
    ([[ $# -ne 1 ]] || [[ ! -r $tmpFolder ]]) && cat << EOF && return 1
Usage: fvim [index]

Open the file from `f` results in vim. You have to use `f` first.
EOF
    vim $(sed "${1}q;d" $tmpFolder)
}

function fcode() {
    local tmpFolder="/tmp/_f_findings"
    ([[ $# -ne 1 ]] || [[ ! -r $tmpFolder ]]) && cat << EOF && return 1
Usage: fvim [index]

Open the file from `f` results in Visual Studio Code. You have to use `f` first.
EOF
    code $(sed "${1}q;d" $tmpFolder)
}

function __generate_wrapper() {
    local product binfile

    for product in code subl; do
        binfile=$(which "${product}" 2> /dev/null)
        if [[ ! -z "${binfile}" ]]; then
            eval "$(cat<<EOF
function ${product}() {
    local filepath executable="${binfile}"

    if [[ \$# -eq 1 ]]; then
        filepath=\$(find "\$__P_PROJECT_PATH" -maxdepth \${__P_MAX_DEPTH:-1} -type d ! -path "\$__P_PROJECT_PATH" -name "\$@")
        if [[ -e "\${filepath}" ]]; then
            \${executable} "\${filepath}" && return 0
        fi
    fi
    \${executable} "\$@"
}
EOF
)"
            complete -F __list_directory_in_p_project_path ${product}
        fi
    done
}
__generate_wrapper

function __generate_jetbrains_cli() {
    local product binfile

    for product in idea webstorm charm appcode; do
        binfile=$(which "$product" 2> /dev/null)
        if [[ ! -z "${binfile}" ]]; then
            eval "$(cat<<EOF1
function ${product}() {
    local executable="${binfile}" filepath help
    help=\$(cat << EOF2
Usage: ${product} path[:number]

Open an arbitrary file, folder, or project for editing in ${product}.
EOF2
)
    [[ ! -e "\${executable}" ]] && (>&2 echo "${product} CLI is not found in [\${executable}].") && (>&2 echo "\${help}") && return 1
    [[ \$# -gt 1 ]] && (>&2 echo "Invalid argument [\$@].") && (>&2 echo "\${help}") && return 1
    [[ "\$1" == "-h" ]] && echo "\${help}" && return 0
    if [[ \$# -eq 0 ]]; then
        \${executable} .
    elif [[ -e "\$@" ]]; then
        \${executable} "\$@"
    else
        filepath=\$(find "\$__P_PROJECT_PATH" -maxdepth \${__P_MAX_DEPTH:-1} -type d ! -path "\$__P_PROJECT_PATH" -name "\$@")
        if [[ -e "\${filepath}" ]]; then
            \${executable} "\${filepath}"
        else
            (>&2 echo "Invalid argument [\$@].") && return 1
        fi
    fi
}
EOF1
)"
            complete -F __list_directory_in_p_project_path ${product}
            eval "$(cat<<EOF1
function ${product}-diff() {
    local executable="${binfile}"
    [[ ! -e "\${executable}" ]] && (>&2 echo "${product} CLI is not found in [\${executable}].") && return 1
    [[ \$# -ne 2 ]] && cat << EOF2 && return 1
Usage: ${product}-diff path1 path2

Viewing differences between files in ${product}.
EOF2
    \${executable} diff "\$@"
}
EOF1
)"
            eval "$(cat<<EOF1
function ${product}-merge() {
    local executable="${binfile}"
    [[ ! -e "\${executable}" ]] && (>&2 echo "${product} CLI is not found in [\${executable}].") && return 1
    [[ \$# -ne 3 ]] && [[ \$# -ne 4 ]] && cat << EOF2 && return 1
Usage: ${product}-merge path1 path2 [path3] output

Merge files in ${product}.
EOF2
    \${executable} merge "\$@"
}
EOF1
)"
        fi
    done
}
__generate_jetbrains_cli

function nvm() {
    unset -f nvm
    source $(brew --prefix nvm)/nvm.sh
    nvm "$@"
}

function node() {
    unset -f node
    source $(brew --prefix nvm)/nvm.sh
    node "$@"
}

function npm() {
    unset -f npm
    source $(brew --prefix nvm)/nvm.sh
    source <(npm completion)
    npm "$@"
}

function rbenv() {
    unset -f rbenv
    eval "$(rbenv init -)"
    rbenv "$@"
}

function perl() {
    unset -f perl
    eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib=$HOME/perl5)"
    perl "$@"
}

function top-cpu() {
    [[ "$1" == "-h" ]] && cat << EOF && return 1
Usage: top-cpu [-h] [-t threshold]

Show processes that consumed cpu that cross the threshold. By default the threshold is 20%.
EOF
    [[ $# -lt 1 ]] && threshold=20 || threshold="$1"
    ps axro pid=,pcpu=,comm= | awk '$2 > '${threshold}' {print ;}'
}

function top-memory() {
    [[ "$1" == "-h" ]] && cat << EOF && return 1
Usage: top-memory [-h] [-t threshold]

Show processes that consumed memory that cross the threshold. By default the threshold is 20%.
EOF
    [[ $# -lt 1 ]] && threshold=20 || threshold="$1"
    ps axmo pid=,pmem=,comm= | awk '$2 > '${threshold}' {print ;}'
}

function decode-base64() {
    local hash_value value
    if [[ $# -eq 1 ]]; then
        hash_value=$1
    else
        read -sp 'Base64 hash (mute): ' hash_value
        echo
    fi
    value=$(base64 -d <<< $hash_value)
    if [[ $? -eq 0 ]]; then
        echo $value | pbcopy
        echo "Decoded value [$(pbpaste)] copied to the clipboard."
    fi
}

function mvn() {
    if [[ -e "./mvnw" ]]; then
        "./mvnw" "$@"
    else
        command mvn "$@"
    fi
}

function gradle() {
    if [[ -e "./gradlew" ]]; then
        "./gradlew" "$@"
    else
        command gradle "$@"
    fi
}
