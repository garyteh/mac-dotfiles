if [[ -t 1 ]]; then
    function tty_escape() { 
        printf "\033[%sm" "$1"
    }
else
    function tty_escape() {
        :
    }
fi

function tty_mkbold() { 
    tty_escape "1;$1"
}

function shell_join() {
    local arg
    printf "%s" "$1"
    shift
    for arg in "$@"; do
        printf " "
        printf "%s" "${arg// /\ }"
    done
}

function chomp() {
    printf "%s" "${1/"$'\n'"/}"
}

function error() {
    tty_red="$(tty_mkbold 31)"
    tty_reset="$(tty_escape 0)"

    printf "%s\n" "$@" >&2
    printf "${tty_red}Error${tty_reset}: %s\n" "$(shell_join "$@")" >&2
    return 1
}

function warn() {
    tty_yellow="$(tty_mkbold 33)"
    tty_reset="$(tty_escape 0)"

    printf "${tty_yellow}Warning${tty_reset}: %s\n" "$(chomp "$1")" >&2
}

function p() {
    [[ -z ${__P_PROJECT_PATH+x} ]] && echo '__P_PROJECT_PATH not found.' && return 1
    [[ $# -ne 1 ]] && cat << EOF && return 1
Usage: p [directory-name]

Navigate to your project quickly. 
EOF
    local path paths numberOfProjects searchTerm
    searchTerm="$1"
    paths=$(find $__P_PROJECT_PATH -mindepth 1 -maxdepth ${__P_MAX_DEPTH:-1} -type d -name $searchTerm)

    if [[ ! -z "${paths}" ]]; then
        numberOfProjects=$(wc -l <<< "$paths")
        if [[ $numberOfProjects -eq 1 ]]; then
            path=$(sed '1q;d' <<< "$paths")
            [[ -d "$path" ]] && cd "$path" && pwd && [[ ! -z ${__P_POST_CMD+x} ]] && eval ${__P_POST_CMD}
            return 0
        elif [[ $numberOfProjects -gt 1 ]]; then
            nl <<< "$paths"
            while true; do
                read -p "Select project (1-$numberOfProjects): " index
                if [[ $index =~ ^[0-9]+$ ]]; then
                    path=$(sed "${index}q;d" <<< "$paths")
                    [[ -d "$path" ]] && cd "$path" && pwd && [[ ! -z ${__P_POST_CMD+x} ]] && eval ${__P_POST_CMD}
                    return 0
                fi
            done
        fi
    fi
    echo "Project not found: $searchTerm"
    return 1
}

function f() {
    [[ $# -ne 1 ]] && cat << EOF && return 1
Usage: f [search-term]

Find file name from current folder.
EOF
    local tmpFolder="/tmp/_f_findings"
    find . -iname "*$1*" | tee $tmpFolder | nl
}

function f#() {
    local tmpFolder="/tmp/_f_findings"
    ([[ $# -ne 1 ]] || [[ ! -r $tmpFolder ]]) && cat << EOF && return 1
Usage: f# [0..n]

Show file path from `f` results. You have to use `f` first.
EOF
    sed "${1}q;d" $tmpFolder
}

function fvim() {
    local tmpFolder="/tmp/_f_findings"
    ([[ $# -ne 1 ]] || [[ ! -r $tmpFolder ]]) && cat << EOF && return 1
Usage: fvim [index]

Open the file from `f` results in vim. You have to use `f` first.
EOF
    vim $(sed "${1}q;d" $tmpFolder)
}

function fcode() {
    local tmpFolder="/tmp/_f_findings"
    ([[ $# -ne 1 ]] || [[ ! -r $tmpFolder ]]) && cat << EOF && return 1
Usage: fvim [index]

Open the file from `f` results in Visual Studio Code. You have to use `f` first.
EOF
    code $(sed "${1}q;d" $tmpFolder)
}

function nvm() {
    unset -f nvm node npm
    if [[ -s "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" ]]; then
        source "$HOMEBREW_PREFIX/opt/nvm/nvm.sh"
    else
        error "Unable to initialise nvm. nvm.sh not found."
    fi
    if [[ -s "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" ]]; then
        source "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm"
    else 
        warn "Unable to initialise nvm bash completion."
    fi
    nvm "$@"
}

function node() {
    unset -f nvm node npm
    if [[ -s "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" ]]; then
        source "$HOMEBREW_PREFIX/opt/nvm/nvm.sh"
    else
        error "Unable to initialise nvm. nvm.sh not found."
    fi
    if [[ -s "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" ]]; then
        source "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm"
    else 
        warn "Unable to initialise nvm bash completion."
    fi
    node "$@"
}

function npm() {
    unset -f nvm node npm
    if [[ -s "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" ]]; then
        source "$HOMEBREW_PREFIX/opt/nvm/nvm.sh"
    else
        error "Unable to initialise nvm. nvm.sh not found."
    fi
    if [[ -s "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" ]]; then
        source "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm"
    else 
        warn "Unable to initialise nvm bash completion."
    fi
    npm "$@"
}

function rbenv() {
    unset -f rbenv
    eval "$(rbenv init -)"
    rbenv "$@"
}

function perl() {
    unset -f perl
    eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib=$HOME/perl5)"
    perl "$@"
}

function pyenv() {
    unset -f pyenv
    eval "$(pyenv init -)"
    eval "$(pyenv init --path)"
    eval "$(pyenv virtualenv-init -)"
    alias pyenv='AR=/usr/bin/ar pyenv'
    pyenv "$@"
}

function fuck() {
    unset -f fuck thefuck
    eval "$(thefuck --alias)"
    fuck "$@"
}

function thefuck() {
    unset -f fuck thefuck
    eval "$(thefuck --alias)"
    thefuck "$@"
}

function jenv() {
    unset -f jenv
    eval "$(jenv init -)"
    jenv "$@"
}

function docker() {
    unset -f docker
    if ! docker stats --no-stream &> /dev/null; then
        open -a Docker
        echo -n "Starting docker daemon"
        until docker stats --no-stream &> /dev/null
        do
            echo -n '.'
            sleep 2
        done
        echo
    fi
    docker "$@"
}

function pyenv-virtualenv-init() {
    unset -f pyenv-virtualenv-init
    eval "$(pyenv virtualenv-init -)"
    pyenv-virtualenv-init "$@"
}

function top-cpu() {
    [[ "$1" == "-h" ]] && cat << EOF && return 1
Usage: top-cpu [-h] [-t threshold]

Show processes that consumed cpu that cross the threshold. By default the threshold is 20%.
EOF
    [[ $# -lt 1 ]] && threshold=20 || threshold="$1"
    ps axro pid=,pcpu=,comm= | awk '$2 > '${threshold}' {print ;}'
}

function top-memory() {
    [[ "$1" == "-h" ]] && cat << EOF && return 1
Usage: top-memory [-h] [-t threshold]

Show processes that consumed memory that cross the threshold. By default the threshold is 20%.
EOF
    [[ $# -lt 1 ]] && threshold=20 || threshold="$1"
    ps axmo pid=,pmem=,comm= | awk '$2 > '${threshold}' {print ;}'
}

function decode-base64() {
    local hash_value value
    if [[ $# -eq 1 ]]; then
        hash_value=$1
    else
        read -sp 'Base64 hash (mute): ' hash_value
        echo
    fi
    value=$(base64 -d <<< $hash_value)
    if [[ $? -eq 0 ]]; then
        echo $value | pbcopy
        echo "Decoded value [$(pbpaste)] copied to the clipboard."
    fi
}

function mvn() {
    if [[ -e "./mvnw" ]]; then
        "./mvnw" "$@"
    else
        mvn "$@"
    fi
}

function gradle() {
    if [[ -e "./gradlew" ]]; then
        "./gradlew" "$@"
    else
        gradle "$@"
    fi
}
